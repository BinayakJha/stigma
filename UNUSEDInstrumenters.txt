
class IMEI_Instrumenter():

	# Every instrumenter has a "target line" which is the original, assembly (smali) line of 
	# source code that has triggered this instrumentation
	def __init__(self, scd):
		self.target_line = target_line
		self.smali_class_def = scd

	def gen_instrumentation(self):
		result_line = self.raw_text[idx+2]

		search_object = re.search(REGEX_V_AND_NUMBERS, result_line)
		#print("search object: " + str(search_object))
		reg = search_object.group()


		taint_location = scd.make_taint_storage(reg)
		tmp_reg_for_constant = self.make_new_reg()


		idx = self.insert_line(idx, "\n")
		idx = self.insert_line(idx, smali.COMMENT("TAINT INSTRUCTION ADDED BY STIGMA for getDeviceID()"))
		idx = self.insert_line(idx, "    const " + tmp_reg_for_constant + ", 0x1\n")
		idx = self.insert_line(idx, "    iput " + tmp_reg_for_constant + ", p0, " + self.class_name + "->" + taint_location + "\n")
		idx = self.insert_line(idx, "\n")


		if("-D" in flags):
			print("\n--- modified lines ---")
			for l in self.raw_text[idx-8:idx+6]:
				print(l, end="")
			print("^^^ modified lines ^^^\n")

		return idx